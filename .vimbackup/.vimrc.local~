" Filetypes and correspinding syntax {
	au BufNewFile,BufRead *.scss set filetype=sass
	au BufNewFile,BufRead *.jade set filetype=jade

" Formatting {
    set wrap " wrap lines
    set linebreak " wrap lines at words, not chars
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set tabstop=4                   " An indentation every four columns
    set softtabstop=0               " Let backspace delete indent
	set visualbell
    set linespace=5                 " No extra spaces between rows
    set relativenumber
    set spell spelllang=en_gb       " Default spelling language
    set listchars=tab:\ \ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
" }


" NerdTree {
        map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
        map <leader>e :NERDTreeFind<CR>
        nmap <leader>nt :NERDTreeFind<CR>

        let NERDTreeShowBookmarks=0
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=0
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=0
        let NERDTreeKeepTreeInNewTab=1
        let g:nerdtree_tabs_open_on_gui_startup=1
" }

    " neocomplcache {
		" AutoComplPop like behavior.
		let g:neocomplcache_enable_auto_select = 0
    " }
	
	
" GUI Settings {
    if has('gui_running')
        set lines=40
        set transparency=5
        if !exists("g:spf13_no_big_font")
        	set guifont=Andale\ Mono\ Regular:h12,Menlo\ Regular:h12,Consolas\ Regular:h12,Courier\ New\ Regular:h12
        endif
    else
        if &term == 'xterm' || &term == 'screen'
            set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
        endif
        "set term=builtin_ansi       " Make arrow and other keys work
    endif
" }

" Syntastic settings {
	" General settings {
		let g:syntastic_error_symbol = '✗'
		let g:syntastic_style_error_symbol = '☹'
		let g:syntastic_warning_symbol = '⚠'
		let g:syntastic_style_warning_symbol = '☃'
	" }

	" CSS {
		let g:syntastic_css_checkers = ['csslint', 'prettycss']
	" }
	
	" Coffeescript {
		let g:syntastic_coffee_checkers = ['coffeelint']
		let g:syntastic_coffee_coffeelint_args = '-f /Users/gui/code/configs/.coffeelint.json'
	" }
" }


if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '--include-vars',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif
